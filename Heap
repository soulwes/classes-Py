class Heap_min:
    def __init__(self):
        self.heap = []

    def min(self):
        return self.heap[0]

    def sift_up(self, x):
        while x > 0 and self.heap[(x - 1) // 2] > self.heap[x]:
            self.heap[(x - 1) // 2], self.heap[x] = self.heap[x], self.heap[(x - 1) // 2]
            x = (x - 1) // 2

    def insert(self, x):
        self.heap.append(x)
        n = len(self.heap) - 1
        self.sift_up(n)

    def sift_down(self, i, n):
        while True:
            max_position = i
            if 2 * i + 1 < n and self.heap[2 * i + 1] < self.heap[max_position]:
                max_position = 2 * i + 1
            if 2 * i + 2 < n and self.heap[2 * i + 2] < self.heap[max_position]:
                max_position = 2 * i + 2
            if max_position == i:
                break
            self.heap[i], self.heap[max_position] = self.heap[max_position], self.heap[i]
            i = max_position

    def pop(self):
        self.heap[-1], self.heap[0] = self.heap[0], self.heap[-1]
        min_el = self.heap.pop()
        self.sift_down(0, len(self.heap))
        return min_el
